
plugins {
    id 'java-gradle-plugin'
    id 'jacoco'
    alias libs.plugins.plugin.publish
    alias libs.plugins.spotless
    alias libs.plugins.sonarqube
}

repositories {
    mavenCentral()
}

apply from: project.file('compile.gradle')
apply from: project.file('spotless.gradle')
apply from: project.file('test.gradle')
apply from: project.file('jacoco.gradle')
apply from: project.file('sonarqube.gradle')

def functionalTestSrc = sourceSets.create('functionalTest')
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
tasks.register('functionalTest', Test) {
    useJUnitPlatform()
    testClassesDirs = functionalTestSrc.output.classesDirs
    classpath = functionalTestSrc.runtimeClasspath
    gradlePlugin.testSourceSets(functionalTestSrc)
}

dependencies {
    functionalTestRuntimeOnly libs.bundles.test.runtime
}

gradlePlugin {
    website = 'https://guillermo.dev/gradle-plugin-c-language/'
    vcsUrl = 'https://github.com/guillermocalvo/gradle-plugin-c-language'
    plugins {
        cApplication {
            id = 'dev.guillermo.gradle.c-application'
            displayName = 'C Application Plugin'
            description = 'A plugin that produces a native application from C source'
            tags.set([
                'native',
                'c',
                'application',
                'toolchain'
            ])
            implementationClass = 'dev.guillermo.gradle.language.c.plugins.CApplicationPlugin'
        }
        cLibrary {
            id = 'dev.guillermo.gradle.c-library'
            displayName = 'C Library Plugin'
            description = 'A plugin that produces a native library from C source'
            tags.set([
                'native',
                'c',
                'library',
                'toolchain'
            ])
            implementationClass = 'dev.guillermo.gradle.language.c.plugins.CLibraryPlugin'
        }
        cUnitTest {
            id = 'dev.guillermo.gradle.c-unit-test'
            displayName = 'C Unit Test Plugin'
            description = 'A plugin that sets up the infrastructure for testing C binaries using a simple test executable.'
            tags.set([
                'native',
                'c',
                'unit-test',
                'toolchain'
            ])
            implementationClass = 'dev.guillermo.gradle.language.c.plugins.CUnitTestPlugin'
        }
    }
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    dependsOn test
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                minimum = 0.9
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.8
            }
        }
    }
}

check {
    dependsOn tasks.functionalTest
    finalizedBy jacocoTestCoverageVerification
}
